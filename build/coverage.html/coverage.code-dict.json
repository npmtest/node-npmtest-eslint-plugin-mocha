{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/lib.npmtest_eslint_plugin_mocha.js":"/* istanbul instrument in package npmtest_eslint_plugin_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_mocha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_mocha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-mocha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_mocha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_mocha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_mocha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_mocha.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_mocha.__dirname + '/lib.npmtest_eslint_plugin_mocha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/index.js":"'use strict';\n\nmodule.exports = {\n    rules: {\n        'no-exclusive-tests': require('./lib/rules/no-exclusive-tests'),\n        'no-pending-tests': require('./lib/rules/no-pending-tests'),\n        'no-skipped-tests': require('./lib/rules/no-skipped-tests'),\n        'handle-done-callback': require('./lib/rules/handle-done-callback'),\n        'no-synchronous-tests': require('./lib/rules/no-synchronous-tests'),\n        'no-global-tests': require('./lib/rules/no-global-tests'),\n        'no-return-and-callback': require('./lib/rules/no-return-and-callback'),\n        'valid-test-description': require('./lib/rules/valid-test-description'),\n        'valid-suite-description': require('./lib/rules/valid-suite-description'),\n        'no-mocha-arrows': require('./lib/rules/no-mocha-arrows'),\n        'no-hooks': require('./lib/rules/no-hooks'),\n        'no-hooks-for-single-case': require('./lib/rules/no-hooks-for-single-case'),\n        'no-sibling-hooks': require('./lib/rules/no-sibling-hooks'),\n        'no-top-level-hooks': require('./lib/rules/no-top-level-hooks'),\n        'no-identical-title': require('./lib/rules/no-identical-title'),\n        'max-top-level-suites': require('./lib/rules/max-top-level-suites'),\n        'no-nested-tests': require('./lib/rules/no-nested-tests')\n    },\n    configs: {\n        recommended: {\n            rules: {\n                'mocha/no-exclusive-tests': 2\n            }\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-exclusive-tests.js":"'use strict';\n\nvar getAdditionalTestFunctions = require('../util/settings').getAdditionalTestFunctions,\n    astUtils = require('../util/ast');\n\nmodule.exports = function (context) {\n    var mochaTestFunctions = [\n            'it',\n            'describe',\n            'suite',\n            'test',\n            'context',\n            'specify'\n        ],\n        settings = context.settings,\n        additionalTestFunctions = getAdditionalTestFunctions(settings);\n\n    mochaTestFunctions = mochaTestFunctions.concat(additionalTestFunctions);\n\n    function matchesMochaTestFunction(object) {\n        var name = astUtils.getNodeName(object);\n\n        return mochaTestFunctions.indexOf(name) !== -1;\n    }\n\n    function isPropertyNamedOnly(property) {\n        return property && astUtils.getPropertyName(property) === 'only';\n    }\n\n    function isCallToMochasOnlyFunction(callee) {\n        return callee.type === 'MemberExpression' &&\n            matchesMochaTestFunction(callee.object) &&\n            isPropertyNamedOnly(callee.property);\n    }\n\n    return {\n        CallExpression: function (node) {\n            var callee = node.callee;\n\n            if (callee && isCallToMochasOnlyFunction(callee)) {\n                context.report({\n                    node: callee.property,\n                    message: 'Unexpected exclusive mocha test.'\n                });\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [\n    {\n        type: 'object',\n        properties: {\n            additionalTestFunctions: {\n                type: 'array',\n                items: {\n                    type: 'string'\n                },\n                minItems: 1,\n                uniqueItems: true\n            }\n        }\n    }\n];\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/util/settings.js":"/* eslint-env node*/\n\n'use strict';\n\nfunction settingFor(propertyName) {\n  return function (settings) {\n    var value = settings['mocha/' + propertyName],\n        mochaSettings = settings.mocha || {};\n\n    return value || mochaSettings[propertyName] || [];\n  };\n}\n\nmodule.exports = {\n  getAdditionalTestFunctions: settingFor('additionalTestFunctions'),\n  additionalSuiteNames: settingFor('additionalSuiteNames'),\n  getAdditionalXFunctions: settingFor('additionalXFunctions')\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/util/ast.js":"/* eslint-env node*/\n\n'use strict';\n\nvar describeAliases = [ 'describe', 'xdescribe', 'describe.only', 'describe.skip',\n                        'context', 'xcontext', 'context.only', 'context.skip',\n                        'suite', 'xsuite', 'suite.only', 'suite.skip' ],\n    hooks = [ 'before', 'after', 'beforeEach', 'afterEach' ],\n    testCaseNames = [ 'it', 'it.only', 'it.skip',\n                      'test', 'test.only', 'test.skip',\n                      'specify', 'specify.only', 'specify.skip' ];\n\nfunction getPropertyName(property) {\n    return property.name || property.value;\n}\n\nfunction getNodeName(node) {\n    if (node.type === 'MemberExpression') {\n        return getNodeName(node.object) + '.' + getPropertyName(node.property);\n    }\n    return node.name;\n}\n\nfunction isDescribe(node, additionalSuiteNames) {\n  return node\n      && node.type === 'CallExpression'\n      && describeAliases.concat(additionalSuiteNames).indexOf(getNodeName(node.callee)) > -1;\n}\n\nfunction isHookIdentifier(node) {\n  return node\n      && node.type === 'Identifier'\n      && hooks.indexOf(node.name) !== -1;\n}\n\nfunction isTestCase(node) {\n    return node\n        && node.type === 'CallExpression'\n        && testCaseNames.indexOf(getNodeName(node.callee)) > -1;\n}\n\nmodule.exports = {\n  isDescribe: isDescribe,\n  isHookIdentifier: isHookIdentifier,\n  isTestCase: isTestCase,\n  getPropertyName: getPropertyName,\n  getNodeName: getNodeName\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-pending-tests.js":"'use strict';\n\nmodule.exports = function (context) {\n    var mochaTestFunctionNames = [\n        'it',\n        'test',\n        'specify'\n    ];\n\n    function isMochaTest(callee) {\n        return callee.type === 'Identifier' &&\n            mochaTestFunctionNames.indexOf(callee.name) !== -1;\n    }\n\n    function isPendingMochaTest(node) {\n        return isMochaTest(node.callee) &&\n            node.arguments.length === 1 &&\n            node.arguments[0].type === 'Literal';\n    }\n\n    return {\n        CallExpression: function (node) {\n            if (node.callee && isPendingMochaTest(node)) {\n                context.report({\n                    node: node,\n                    message: 'Unexpected pending mocha test.'\n                });\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-skipped-tests.js":"'use strict';\n\nvar getAdditionalTestFunctions = require('../util/settings').getAdditionalTestFunctions,\n    getAdditionalXFunctions = require('../util/settings').getAdditionalXFunctions,\n    mochaTestFunctions,\n    mochaXFunctions;\n\nfunction matchesMochaTestFunction(object) {\n    return object && mochaTestFunctions.indexOf(object.name) !== -1;\n}\n\nfunction isPropertyNamedSkip(property) {\n    return property && (property.name === 'skip' || property.value === 'skip');\n}\n\nfunction isCallToMochasSkipFunction(callee) {\n    return callee.type === 'MemberExpression' &&\n       matchesMochaTestFunction(callee.object) &&\n       isPropertyNamedSkip(callee.property);\n}\n\nfunction createSkipAutofixFunction(callee) {\n    var endRangeOfMemberExpression = callee.range[1],\n        endRangeOfMemberExpressionObject = callee.object.range[1],\n        rangeToRemove = [ endRangeOfMemberExpressionObject, endRangeOfMemberExpression ];\n\n    return function removeSkipProperty(fixer) {\n        return fixer.removeRange(rangeToRemove);\n    };\n}\n\nfunction createXAutofixFunction(callee) {\n    var rangeToRemove = [ callee.range[0], callee.range[0] + 1 ];\n\n    return function removeXPrefix(fixer) {\n        return fixer.removeRange(rangeToRemove);\n    };\n}\n\nfunction isMochaXFunction(name) {\n    return mochaXFunctions.indexOf(name) !== -1;\n}\n\nfunction isCallToMochaXFunction(callee) {\n    return callee.type === 'Identifier' && isMochaXFunction(callee.name);\n}\n\nmodule.exports = function (context) {\n    var settings = context.settings,\n        additionalTestFunctions = getAdditionalTestFunctions(settings),\n        additionalXFunctions = getAdditionalXFunctions(settings);\n\n    mochaTestFunctions = [\n        'it',\n        'describe',\n        'suite',\n        'test',\n        'context',\n        'specify'\n    ].concat(additionalTestFunctions);\n    mochaXFunctions = [\n        'xit',\n        'xdescribe',\n        'xcontext',\n        'xspecify'\n    ].concat(additionalXFunctions);\n\n    return {\n        CallExpression: function (node) {\n            var callee = node.callee;\n\n            if (callee && isCallToMochasSkipFunction(callee)) {\n                context.report({\n                    node: callee.property,\n                    message: 'Unexpected skipped mocha test.',\n                    fix: createSkipAutofixFunction(callee)\n                });\n            } else if (callee && isCallToMochaXFunction(callee)) {\n                context.report({\n                    node: callee,\n                    message: 'Unexpected skipped mocha test.',\n                    fix: createXAutofixFunction(callee)\n                });\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [\n    {\n        type: 'object',\n        properties: {\n            additionalTestFunctions: {\n                type: 'array',\n                items: {\n                    type: 'string'\n                },\n                minItems: 1,\n                uniqueItems: true\n            },\n            additionalXFunctions: {\n                type: 'array',\n                items: {\n                    type: 'string'\n                },\n                minItems: 1,\n                uniqueItems: true\n            }\n        }\n    }\n];\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/handle-done-callback.js":"'use strict';\n\nvar R = require('ramda');\n\nmodule.exports = function (context) {\n    var possibleAsyncFunctionNames = [\n        'it',\n        'it.only',\n        'test',\n        'test.only',\n        'specify',\n        'specify.only',\n        'before',\n        'after',\n        'beforeEach',\n        'afterEach'\n    ];\n\n    function getCalleeName(callee) {\n        if (callee.type === 'MemberExpression') {\n             return callee.object.name + '.' + callee.property.name;\n        }\n\n        return callee.name;\n    }\n\n    function hasParentMochaFunctionCall(functionExpression) {\n        var name;\n\n        if (functionExpression.parent && functionExpression.parent.type === 'CallExpression') {\n            name = getCalleeName(functionExpression.parent.callee);\n            return possibleAsyncFunctionNames.indexOf(name) > -1;\n        }\n\n        return false;\n    }\n\n    function isAsyncFunction(functionExpression) {\n        return functionExpression.params.length === 1;\n    }\n\n    function findParamInScope(paramName, scope) {\n        return R.find(function (variable) {\n            return variable.name === paramName && variable.defs[0].type === 'Parameter';\n        }, scope.variables);\n    }\n\n    function isReferenceHandled(reference) {\n        var parent = context.getNodeByRangeIndex(reference.identifier.range[0]).parent;\n\n        return parent.type === 'CallExpression';\n    }\n\n    function hasHandledReferences(references) {\n        return references.some(isReferenceHandled);\n    }\n\n    function checkAsyncMochaFunction(functionExpression) {\n        var scope = context.getScope(),\n            callback = functionExpression.params[0],\n            callbackName = callback.name,\n            callbackVariable = findParamInScope(callbackName, scope);\n\n        if (callbackVariable && !hasHandledReferences(callbackVariable.references)) {\n            context.report(callback, 'Expected \"{{name}}\" callback to be handled.', { name: callbackName });\n        }\n    }\n\n    function check(node) {\n        if (hasParentMochaFunctionCall(node) && isAsyncFunction(node)) {\n            checkAsyncMochaFunction(node);\n        }\n    }\n\n    return {\n        FunctionExpression: check,\n        ArrowFunctionExpression: check\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-synchronous-tests.js":"'use strict';\n\nvar R = require('ramda');\n\nmodule.exports = function (context) {\n    var possibleAsyncFunctionNames = [\n        'it',\n        'it.only',\n        'test',\n        'test.only',\n        'specify',\n        'specify.only',\n        'before',\n        'after',\n        'beforeEach',\n        'afterEach'\n    ];\n\n    function getCalleeName(callee) {\n        if (callee.type === 'MemberExpression') {\n             return callee.object.name + '.' + callee.property.name;\n        }\n\n        return callee.name;\n    }\n\n    function hasParentMochaFunctionCall(functionExpression) {\n        var name;\n\n        if (functionExpression.parent && functionExpression.parent.type === 'CallExpression') {\n            name = getCalleeName(functionExpression.parent.callee);\n            return possibleAsyncFunctionNames.indexOf(name) > -1;\n        }\n\n        return false;\n    }\n\n    function hasAsyncCallback(functionExpression) {\n        return functionExpression.params.length === 1;\n    }\n\n    function findPromiseReturnStatement(nodes) {\n      return R.find(function (node) {\n        return node.type === 'ReturnStatement' && node.argument && node.argument.type !== 'Literal';\n      }, nodes);\n    }\n\n    function checkPromiseReturn(functionExpression) {\n        var bodyStatement = functionExpression.body,\n            returnStatement = null;\n\n        if (bodyStatement.type === 'BlockStatement') {\n            returnStatement = findPromiseReturnStatement(functionExpression.body.body);\n        } else if (bodyStatement.type === 'CallExpression') {\n            //  allow arrow statements calling a promise with implicit return.\n            returnStatement = bodyStatement;\n        }\n\n        if (!returnStatement) {\n            context.report(functionExpression, 'Unexpected synchronous test.');\n        }\n    }\n\n    function check(node) {\n        if (hasParentMochaFunctionCall(node) && !hasAsyncCallback(node)) {\n            checkPromiseReturn(node);\n        }\n    }\n\n    return {\n        FunctionExpression: check,\n        ArrowFunctionExpression: check\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-global-tests.js":"'use strict';\n\nmodule.exports = function (context) {\n    var testFunctionNames = [\n            'it',\n            'it.only',\n            'it.skip',\n            'test',\n            'test.only',\n            'test.skip',\n            'specify',\n            'specify.only',\n            'specify.skip'\n        ];\n\n    function getFnName(callee) {\n        if (callee.type === 'MemberExpression') {\n            if (callee.computed) {\n                return callee.object.name + '.' + callee.property.value;\n            }\n\n            return callee.object.name + '.' + callee.property.name;\n        }\n\n        return callee.name;\n    }\n\n    function isGlobalScope(scope) {\n        return scope.type === 'global' || scope.type === 'module';\n    }\n\n    return {\n        CallExpression: function (node) {\n            var callee = node.callee,\n                fnName = getFnName(callee),\n                scope = context.getScope();\n\n            if (testFunctionNames.indexOf(fnName) !== -1 && isGlobalScope(scope)) {\n                context.report(callee, 'Unexpected global mocha test.');\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-return-and-callback.js":"'use strict';\n\nvar R = require('ramda'),\n    findReturnStatement = R.find(R.propEq('type', 'ReturnStatement')),\n    possibleAsyncFunctionNames = [\n        'it',\n        'it.only',\n        'test',\n        'test.only',\n        'specify',\n        'specify.only',\n        'before',\n        'after',\n        'beforeEach',\n        'afterEach'\n    ];\n\nfunction getCalleeName(callee) {\n    if (callee.type === 'MemberExpression') {\n        return callee.object.name + '.' + callee.property.name;\n    }\n\n    return callee.name;\n}\n\nfunction hasParentMochaFunctionCall(functionExpression) {\n    var name;\n\n    if (functionExpression.parent && functionExpression.parent.type === 'CallExpression') {\n        name = getCalleeName(functionExpression.parent.callee);\n        return possibleAsyncFunctionNames.indexOf(name) > -1;\n    }\n\n    return false;\n}\n\nfunction reportIfShortArrowFunction(context, node) {\n    if (node.body.type !== 'BlockStatement') {\n        context.report({\n            node: node.body,\n            message: 'Confusing implicit return in a test with callback'\n        });\n        return true;\n    }\n    return false;\n}\n\nfunction isAllowedReturnStatement(node, doneName) {\n    var argument = node.argument;\n    if (argument === null || argument.type === 'Literal') {\n        return true;\n    }\n    if (argument.type === 'Identifier' && argument.name === 'undefined') {\n        return true;\n    }\n    return argument.type === 'CallExpression' &&\n        argument.callee.type === 'Identifier' &&\n        argument.callee.name === doneName;\n}\n\nfunction reportIfFunctionWithBlock(context, node, doneName) {\n    var returnStatement = findReturnStatement(node.body.body);\n    if (returnStatement && !isAllowedReturnStatement(returnStatement, doneName)) {\n        context.report({\n            node: returnStatement,\n            message: 'Unexpected use of `return` in a test with callback'\n        });\n    }\n}\n\nmodule.exports = function (context) {\n    function check(node) {\n        if (node.params.length === 0 || !hasParentMochaFunctionCall(node)) {\n            return;\n        }\n\n        if (!reportIfShortArrowFunction(context, node)) {\n            reportIfFunctionWithBlock(context, node, node.params[0].name);\n        }\n    }\n\n    return {\n        FunctionExpression: check,\n        ArrowFunctionExpression: check\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/valid-test-description.js":"'use strict';\n\n/**\n * @fileoverview Match test descriptions to match a pre-configured regular expression\n * @author Alexander Afanasyev\n */\n\nvar defaultTestNames = [ 'it', 'test', 'specify' ];\n\nmodule.exports = function (context) {\n    var pattern = context.options[0] ? new RegExp(context.options[0]) : /^should/,\n        testNames = context.options[1] ? context.options[1] : defaultTestNames;\n\n    return {\n        CallExpression: function (node) {\n            var callee = node.callee,\n                args;\n\n            if (callee && callee.name && testNames.indexOf(callee.name) > -1) {\n                args = node.arguments;\n                if (args && args[0] && typeof args[0].value === 'string' && !pattern.test(args[0].value)) {\n                    context.report(node, 'Invalid \"' + callee.name + '()\" description found.');\n                }\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/valid-suite-description.js":"'use strict';\n\n/**\n * @fileoverview Match suite descriptions to match a pre-configured regular expression\n * @author Alexander Afanasyev\n */\n\nvar defaultSuiteNames = [ 'describe', 'context', 'suite' ];\n\nmodule.exports = function (context) {\n    var pattern = new RegExp(context.options[0]),\n        suiteNames = context.options[1] ? context.options[1] : defaultSuiteNames;\n\n    return {\n        CallExpression: function (node) {\n            var callee = node.callee,\n                args;\n\n            if (callee && callee.name && suiteNames.indexOf(callee.name) > -1) {\n                args = node.arguments;\n                if (args && args[0] && typeof args[0].value === 'string' && !pattern.test(args[0].value)) {\n                    context.report(node, 'Invalid \"' + callee.name + '()\" description found.');\n                }\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-mocha-arrows.js":"'use strict';\n\n/**\n * @fileoverview Disallow arrow functions as arguments to Mocha globals\n * @author Paul Melnikow\n */\n\nvar R = require('ramda'),\n    mochaFunctionNames = [\n        'describe',\n        'describe.skip',\n        'xdescribe',\n        'suite',\n        'context',\n        'xcontext',\n        'specify',\n        'xspecify',\n        'it',\n        'it.only',\n        'xit',\n        'test',\n        'test.only',\n        'specify',\n        'specify.only',\n        'before',\n        'after',\n        'beforeEach',\n        'afterEach'\n    ];\n\nmodule.exports = function (context) {\n    function getCalleeName(callee) {\n        if (callee.type === 'MemberExpression') {\n             return callee.object.name + '.' + callee.property.name;\n        }\n\n        return callee.name;\n    }\n\n    function isLikelyMochaGlobal(scope, name) {\n        return !R.find(R.propEq('name', name), scope.variables);\n    }\n\n    function fixArrowFunction(fixer, fn) {\n        var sourceCode = context.getSourceCode(),\n            paramsLeftParen = sourceCode.getFirstToken(fn),\n            paramsRightParen = sourceCode.getTokenBefore(sourceCode.getTokenBefore(fn.body)),\n            paramsFullText =\n                sourceCode.text.slice(paramsLeftParen.range[0], paramsRightParen.range[1]),\n            functionKeyword = 'function',\n            bodyText;\n\n        if (fn.async) {\n            // When 'async' specified, take care about the keyword.\n            functionKeyword = 'async function';\n            // Strip 'async (...)' to ' (...)'\n            paramsFullText = paramsFullText.slice(5);\n        }\n\n        if (fn.params.length > 0) {\n            paramsFullText = '(' + sourceCode.text.slice(fn.params[0].start, R.last(fn.params).end) + ')';\n        }\n\n        if (fn.body.type === 'BlockStatement') {\n            // When it((...) => { ... }),\n            // simply replace '(...) => ' with 'function () '\n            return fixer.replaceTextRange(\n                [ fn.start, fn.body.start ],\n                functionKeyword + paramsFullText + ' '\n            );\n        }\n\n        bodyText = sourceCode.text.slice(fn.body.range[0], fn.body.range[1]);\n        return fixer.replaceTextRange(\n            [ fn.start, fn.end ],\n            functionKeyword + paramsFullText + ' { return ' + bodyText + '; }'\n        );\n    }\n\n    return {\n        CallExpression: function (node) {\n            var name = getCalleeName(node.callee),\n                fnArg;\n\n            if (name && mochaFunctionNames.indexOf(name) > -1) {\n                fnArg = node.arguments.slice(-1)[0];\n                if (fnArg && fnArg.type === 'ArrowFunctionExpression') {\n                    if (isLikelyMochaGlobal(context.getScope(), name)) {\n                        context.report({\n                            node: node,\n                            message: 'Do not pass arrow functions to ' + name + '()',\n                            fix: function (fixer) {\n                                return fixArrowFunction(fixer, fnArg);\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-hooks.js":"'use strict';\n\nvar astUtil = require('../util/ast');\n\nmodule.exports = function (context) {\n    return {\n        CallExpression: function (node) {\n            if (astUtil.isHookIdentifier(node.callee)) {\n                context.report({\n                    node: node.callee,\n                    message: 'Unexpected use of Mocha `' + node.callee.name + '` hook'\n                });\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-hooks-for-single-case.js":"'use strict';\n\nvar astUtil = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames;\n\nfunction newDescribeLayer(describeNode) {\n    return {\n        describeNode: describeNode,\n        hookNodes: [],\n        testCount: 0\n    };\n}\n\nmodule.exports = function (context) {\n    var options = context.options[0] || {},\n        allowedHooks = options.allow || [],\n        settings = context.settings,\n        layers = [];\n\n    function popLayer(node) {\n        var layer = layers[layers.length - 1];\n        if (layer.describeNode === node) {\n            if (layer.testCount <= 1) {\n                layer.hookNodes\n                    .filter(function (hookNode) {\n                        return allowedHooks.indexOf(hookNode.name) === -1;\n                    })\n                    .forEach(function (hookNode) {\n                        context.report({\n                            node: hookNode,\n                            message: 'Unexpected use of Mocha `' + hookNode.name + '` hook for a single test case'\n                        });\n                    });\n            }\n            layers.pop();\n        }\n    }\n\n    return {\n        Program: function (node) {\n            layers.push(newDescribeLayer(node));\n        },\n\n        CallExpression: function (node) {\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                layers[layers.length - 1].testCount += 1;\n                layers.push(newDescribeLayer(node));\n                return;\n            }\n\n            if (astUtil.isTestCase(node)) {\n                layers[layers.length - 1].testCount += 1;\n            }\n\n            if (astUtil.isHookIdentifier(node.callee)) {\n                layers[layers.length - 1].hookNodes.push(node.callee);\n            }\n        },\n\n        'CallExpression:exit': popLayer,\n        'Program:exit': popLayer\n    };\n};\n\nmodule.exports.schema = [\n    {\n        type: 'object',\n        properties: {\n            allow: {\n                type: 'array',\n                items: {\n                    type: 'string'\n                }\n            }\n        }\n    }\n];\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-sibling-hooks.js":"'use strict';\n\nvar astUtil = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames;\n\nfunction newDescribeLayer(describeNode) {\n    return {\n        describeNode: describeNode,\n        before: false,\n        after: false,\n        beforeEach: false,\n        afterEach: false\n    };\n}\n\nmodule.exports = function (context) {\n    var isUsed = [],\n        settings = context.settings;\n\n    return {\n        Program: function (node) {\n            isUsed.push(newDescribeLayer(node));\n        },\n\n        CallExpression: function (node) {\n            var name = node.callee && node.callee.name;\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n              isUsed.push(newDescribeLayer(node));\n              return;\n            }\n\n            if (!astUtil.isHookIdentifier(node.callee)) {\n              return;\n            }\n\n            if (isUsed[isUsed.length - 1][name]) {\n                context.report({\n                    node: node.callee,\n                    message: 'Unexpected use of duplicate Mocha `' + name + '` hook'\n                });\n            }\n\n            isUsed[isUsed.length - 1][name] = true;\n        },\n\n        'CallExpression:exit': function (node) {\n            if (isUsed[isUsed.length - 1].describeNode === node) {\n              isUsed.pop();\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-top-level-hooks.js":"'use strict';\n\nvar astUtil = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames;\n\nmodule.exports = function (context) {\n    var settings = context.settings,\n        testSuiteStack = [];\n\n    return {\n        CallExpression: function (node) {\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                testSuiteStack.push(node);\n                return;\n            }\n\n            if (!astUtil.isHookIdentifier(node.callee)) {\n              return;\n            }\n\n            if (testSuiteStack.length === 0) {\n                context.report({\n                    node: node.callee,\n                    message: 'Unexpected use of Mocha `' + node.callee.name + '` hook outside of a test suite'\n                });\n            }\n        },\n\n        'CallExpression:exit': function (node) {\n            if (testSuiteStack[testSuiteStack.length - 1] === node) {\n                testSuiteStack.pop();\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-identical-title.js":"'use strict';\n\nvar astUtil = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames;\n\nfunction newLayer() {\n    return {\n        describeTitles: [],\n        testTitles: []\n    };\n}\n\nfunction handlTestCaseTitles(context, titles, node, title) {\n    if (astUtil.isTestCase(node)) {\n        if (titles.indexOf(title) !== -1) {\n            context.report({\n                node: node,\n                message: 'Test title is used multiple times in the same test suite.'\n            });\n        }\n        titles.push(title);\n    }\n}\n\nfunction handlTestSuiteTitles(context, titles, node, title) {\n    var settings = context.settings;\n\n    if (!astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n        return;\n    }\n    if (titles.indexOf(title) !== -1) {\n        context.report({\n            node: node,\n            message: 'Test suite title is used multiple times.'\n        });\n    }\n    titles.push(title);\n}\n\nfunction isFirstArgLiteral(node) {\n    return node.arguments && node.arguments[0] && node.arguments[0].type === 'Literal';\n}\n\nmodule.exports = function (context) {\n    var titleLayers = [\n        newLayer()\n    ],\n    settings = context.settings;\n\n    return {\n        CallExpression: function (node) {\n            var currentLayer = titleLayers[titleLayers.length - 1],\n                title;\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                titleLayers.push(newLayer());\n            }\n            if (!isFirstArgLiteral(node)) {\n                return;\n            }\n\n            title = node.arguments[0].value;\n            handlTestCaseTitles(context, currentLayer.testTitles, node, title);\n            handlTestSuiteTitles(context, currentLayer.describeTitles, node, title);\n        },\n        'CallExpression:exit': function (node) {\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                titleLayers.pop();\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/max-top-level-suites.js":"'use strict';\n\n/**\n * @fileoverview Limit the number of top-level suites in a single file\n * @author Alexander Afanasyev\n */\n\nvar R = require('ramda'),\n    astUtil = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames,\n    defaultSuiteLimit = 1;\n\nmodule.exports = function (context) {\n    var stack = [],\n        topLevelDescribes = [],\n        options = context.options[0] || {},\n        settings = context.settings,\n        suiteLimit;\n\n    if (R.isNil(options.limit)) {\n        suiteLimit = defaultSuiteLimit;\n    } else {\n        suiteLimit = options.limit;\n    }\n\n    return {\n        CallExpression: function (node) {\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                stack.push(node);\n            }\n        },\n\n        'CallExpression:exit': function (node) {\n            if (astUtil.isDescribe(node, additionalSuiteNames(settings))) {\n                if (stack.length === 1) {\n                    topLevelDescribes.push(node);\n                }\n\n                stack.pop(node);\n            }\n        },\n\n        'Program:exit': function () {\n            if (topLevelDescribes.length > suiteLimit) {\n                context.report({\n                    node: topLevelDescribes[suiteLimit],\n                    message: 'The number of top-level suites is more than ' + suiteLimit + '.'\n                });\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-mocha/node_modules/eslint-plugin-mocha/lib/rules/no-nested-tests.js":"'use strict';\n\nvar astUtils = require('../util/ast'),\n    additionalSuiteNames = require('../util/settings').additionalSuiteNames;\n\nmodule.exports = function noNestedTests(context) {\n    var testNestingLevel = 0,\n        settings = context.settings;\n\n    function report(callExpression, isTestCase) {\n        var message = isTestCase ? 'Unexpected test nested within another test.' :\n            'Unexpected suite nested within a test.';\n\n        context.report({\n            message: message,\n            node: callExpression.callee\n        });\n    }\n\n    return {\n        CallExpression: function (node) {\n            var isTestCase = astUtils.isTestCase(node),\n                isDescribe = astUtils.isDescribe(node, additionalSuiteNames(settings));\n\n            if (testNestingLevel > 0 && (isTestCase || isDescribe)) {\n                report(node, isTestCase);\n            }\n\n            if (isTestCase) {\n                testNestingLevel += 1;\n            }\n        },\n\n        'CallExpression:exit': function (node) {\n            if (astUtils.isTestCase(node)) {\n                testNestingLevel -= 1;\n            }\n        }\n    };\n};\n"}